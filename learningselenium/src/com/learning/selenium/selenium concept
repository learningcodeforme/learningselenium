Syncronization in selenium webdriver 
 
 1.implicit wait 
 2.explict wait 
 3.thread.sleep
 4. fluent wait 
 
 implict wait ->  
 define wait time globally for all the item in the page 
 wait for n second before throw exception 
 define one place and it appicable for all item in page/website 
if define 5 seconds implicit wait and item found in 2 sec it start move form that moment.



 Before Selenium 4 Syntax - 
 //driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
 
Selenium  4
 driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

explict wait-> it define local level and it apply on particular element
 specific wait for any particular element 
 
 type of explict wait 
 1) WebDriverWait()
 2. fluent wait()
 
 
 // explicit wait
		// we need to create object of webDriverWait and pass diver on which we want to implment and duration of time)
	    
	    //call until method of WebDriverWait 
		//ExpectedConditions-> what expected condition which we can to call
		//visibilityOfElementLocated--> wait until specfic webelement appear
		//By.cssSelector(".promoCode") --> pass the locator of webelement
		
		  WebDriverWait w = new WebDriverWait(driver, Duration.ofSeconds(5));
		  w.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".promoCode")));
		
	
	date 14/3/24
		
		WebDriverWait() vs fluent wait()
		
		Date 21/4/2024
		
	There is another explicit wait mechanism is called fluent wait 
	
	explict wait can achive via two ways 
	webdriver wait =10 Sec 
	fluent wait  10 sec , Polling in 2 sec 
	it look for elelment in every 2 seconds for 10 second if not found it again process and agian 
		

in fluent wait we need to define our own custom method to look for particular element  and apply wait on that and decide acction on that


Action and frames 


Action Class -- to handle mouse hover and keyboard action 
it provide specific method 


//we need to create action object and pass driver as arrgument to apply action class method on driver instance
// we need to add .build().perform() to perform action in action class method
		Actions action = new Actions(driver);
		action.moveToElement(driver.findElement(By.cssSelector("#nav-link-accountList-nav-line-1"))).build().perform();

		
		
		
		
	
		
	    
 
 
 
 